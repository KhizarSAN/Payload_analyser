#!/bin/bash

# =============================================================================
# D√âMARRAGE PAYLOAD ANALYSER - CONFIGURATION R√âSEAU LAN AUTOMATIQUE
# =============================================================================
# D√©marre l'application avec configuration r√©seau LAN automatique
# Usage: ./start_payload_analyser_lan.sh
# =============================================================================

set -e

echo "üöÄ D√âMARRAGE PAYLOAD ANALYSER - LAN ACCESS"
echo "=========================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =============================================================================
# √âTAPE 1: V√âRIFICATION PR√âALABLE
# =============================================================================

log_info "V√©rification des pr√©requis..."

# V√©rifier que Vagrant est install√©
if ! command -v vagrant &> /dev/null; then
    log_error "‚ùå Vagrant n'est pas install√©"
    echo "üí° Installez Vagrant depuis: https://www.vagrantup.com/downloads"
    exit 1
fi

log_success "‚úÖ Vagrant install√©"

# V√©rifier que VirtualBox est install√©
if ! command -v VBoxManage &> /dev/null; then
    log_warning "‚ö†Ô∏è VirtualBox n'est pas install√© ou pas dans le PATH"
    echo "üí° Installez VirtualBox depuis: https://www.virtualbox.org/wiki/Downloads"
fi

# =============================================================================
# √âTAPE 2: D√âMARRAGE DE LA VM
# =============================================================================

log_info "D√©marrage de la VM Vagrant..."

# V√©rifier le statut de la VM
VM_STATUS=$(vagrant status --machine-readable | grep ",state," | cut -d',' -f4)

if [ "$VM_STATUS" = "running" ]; then
    log_info "VM d√©j√† en cours d'ex√©cution"
elif [ "$VM_STATUS" = "poweroff" ]; then
    log_info "D√©marrage de la VM..."
    vagrant up
else
    log_info "Cr√©ation et d√©marrage de la VM..."
    vagrant up
fi

# =============================================================================
# √âTAPE 3: ATTENTE ET V√âRIFICATION
# =============================================================================

log_info "‚è≥ Attente que la VM soit pr√™te..."
sleep 30

# V√©rifier que la VM est bien d√©marr√©e
if ! vagrant status | grep -q "running"; then
    log_error "‚ùå La VM n'est pas d√©marr√©e"
    exit 1
fi

log_success "‚úÖ VM d√©marr√©e avec succ√®s"

# =============================================================================
# √âTAPE 4: R√âCUP√âRATION DE L'IP LAN
# =============================================================================

log_info "R√©cup√©ration de l'IP LAN..."

# R√©cup√©rer l'IP LAN de la VM
VM_LAN_IP=$(vagrant ssh -c "hostname -I | awk '{print \$1}'" --no-tty 2>/dev/null | tr -d '\r')

if [ -z "$VM_LAN_IP" ]; then
    log_warning "‚ö†Ô∏è Impossible de r√©cup√©rer l'IP LAN de la VM"
    log_info "Tentative de r√©cup√©ration via VirtualBox..."
    VM_LAN_IP=$(VBoxManage guestproperty get qradar-debian "/VirtualBox/GuestInfo/Net/1/V4/IP" 2>/dev/null | cut -d' ' -f2)
fi

if [ -z "$VM_LAN_IP" ]; then
    log_warning "‚ö†Ô∏è IP LAN non d√©tect√©e automatiquement"
    log_info "Vous devrez configurer manuellement le DNS sur les machines clientes"
else
    log_success "üìç IP LAN de la VM: $VM_LAN_IP"
fi

# =============================================================================
# √âTAPE 5: V√âRIFICATION DES SERVICES
# =============================================================================

log_info "V√©rification des services..."

# Attendre un peu plus pour que les services soient pr√™ts
sleep 20

# Test des services principaux
SERVICES=(
    "5000:Application Web Flask"
    "80:Interface Nginx"
    "11434:Ollama SOC"
    "8000:ChromaDB"
    "5001:Retriever API"
)

for service in "${SERVICES[@]}"; do
    port=$(echo $service | cut -d: -f1)
    name=$(echo $service | cut -d: -f2)
    
    if curl -s --connect-timeout 10 "http://localhost:$port/" > /dev/null 2>&1; then
        log_success "‚úÖ $name accessible"
    else
        log_warning "‚ö†Ô∏è $name pas encore pr√™t"
    fi
done

# =============================================================================
# √âTAPE 6: CONFIGURATION DNS LOCAL (OPTIONNELLE)
# =============================================================================

if [ ! -z "$VM_LAN_IP" ]; then
    log_info "Configuration DNS local..."
    
    # V√©rifier si l'entr√©e existe d√©j√†
    if grep -q "payload-analyser.ai" /etc/hosts; then
        log_info "Mise √† jour de l'entr√©e DNS existante..."
        sudo sed -i '/payload-analyser.ai/d' /etc/hosts
    fi
    
    # Ajouter l'entr√©e DNS
    echo "$VM_LAN_IP payload-analyser.ai" | sudo tee -a /etc/hosts > /dev/null
    log_success "‚úÖ DNS local configur√©"
fi

# =============================================================================
# √âTAPE 7: AFFICHAGE DES INFORMATIONS
# =============================================================================

echo ""
echo "üéâ D√âMARRAGE TERMIN√â !"
echo "====================="
echo ""
echo "üì± ACC√àS LOCAUX:"
echo "   ‚Ä¢ Application Web: http://localhost:5000"
echo "   ‚Ä¢ Interface Nginx: http://localhost:8081"
echo "   ‚Ä¢ Ollama SOC: http://localhost:11434"
echo "   ‚Ä¢ ChromaDB: http://localhost:8000"
echo "   ‚Ä¢ Retriever API: http://localhost:5001"
echo ""

if [ ! -z "$VM_LAN_IP" ]; then
    echo "üåê ACC√àS R√âSEAU LAN:"
    echo "   ‚Ä¢ IP du serveur: $VM_LAN_IP"
    echo "   ‚Ä¢ Application Web: http://$VM_LAN_IP"
    echo "   ‚Ä¢ Nom de domaine: http://payload-analyser.ai"
    echo "   ‚Ä¢ Ollama SOC: http://$VM_LAN_IP:11434"
    echo "   ‚Ä¢ ChromaDB: http://$VM_LAN_IP:8000"
    echo "   ‚Ä¢ Retriever API: http://$VM_LAN_IP:5001"
    echo ""
    echo "üìã POUR LES MACHINES CLIENTES:"
    echo "   1. Copiez le fichier 'setup_client_dns.sh' depuis la VM"
    echo "   2. Ex√©cutez: ./setup_client_dns.sh"
    echo "   3. Acc√©dez √†: http://payload-analyser.ai"
    echo ""
fi

echo "üîß COMMANDES UTILES:"
echo "   ‚Ä¢ Arr√™ter: vagrant halt"
echo "   ‚Ä¢ Red√©marrer: vagrant reload"
echo "   ‚Ä¢ Acc√®s SSH: vagrant ssh"
echo "   ‚Ä¢ Statut: vagrant status"
echo ""

if [ ! -z "$VM_LAN_IP" ]; then
    log_success "üéØ Application accessible sur le r√©seau LAN via payload-analyser.ai"
else
    log_warning "‚ö†Ô∏è Configuration r√©seau √† v√©rifier manuellement"
fi 