===============================================================================
                    M√âTHODE COMPL√àTE POUR FAIRE TOURNER MISTRAL
                           ARCHITECTURE TGI MODERNE
===============================================================================

üéØ **ARCHITECTURE TGI MISTRAL DOCKERIS√âE**

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   TGI Mistral (API)    ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   ChromaDB      ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   Retriever +   ‚îÇ
‚îÇ   Port: 8080           ‚îÇ    ‚îÇ   (Vector DB)   ‚îÇ    ‚îÇ   FastAPI App   ‚îÇ
‚îÇ   (models/mistral-7b)  ‚îÇ    ‚îÇ   Port: 8000    ‚îÇ    ‚îÇ   Port: 5000    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

    TGI Mistral : sert l'API de g√©n√©ration Mistral 7B, 24/7, avec pr√©-chargement local du mod√®le.
    
    ChromaDB : base vectorielle pour stocker embeddings et r√©cup√©rer du contexte historique.
    
    Retrieval App : service FastAPI qui :
        - stocke vos nouveaux payloads + analyses (embeddings via sentence-transformers),
        - r√©cup√®re un contexte pertinent dans Chroma,
        - requ√™te TGI Mistral avec RAG,
        - expose endpoints /health, /analyze, /learn, /stats.

===============================================================================
1. SERVICES DOCKER (docker-compose.yml)
===============================================================================

# Service Ollama (mod√®le Mistral)
mistral:
  image: ollama/ollama:latest
  container_name: mistral_ai
  restart: always
  ports:
    - "11434:11434"
  volumes:
    - mistral_data:/root/.ollama
    - ./mistral_models:/models
  environment:
    - OLLAMA_HOST=0.0.0.0
    - OLLAMA_ORIGINS=*
  healthcheck:
    test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:11434/api/tags"]
    interval: 60s
    timeout: 30s
    retries: 10
    start_period: 300s

# Service ChromaDB (base vectorielle)
chromadb:
  image: chromadb/chroma:latest
  container_name: chromadb_vector
  restart: always
  ports:
    - "8000:8000"
  volumes:
    - chromadb_data:/chroma/chroma
  environment:
    - CHROMA_SERVER_HOST=0.0.0.0
    - CHROMA_SERVER_HTTP_PORT=8000
    - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
  healthcheck:
    test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/v1/heartbeat"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 60s

# Service Mistral Learner (notre API)
mistral_learner:
  build:
    context: ..
    dockerfile: Docker/Dockerfile.mistral
  container_name: mistral_learner
  restart: always
  ports:
    - "5001:5001"
  volumes:
    - ../embeddings_data:/app/embeddings_data
  environment:
    - MISTRAL_URL=http://mistral:11434
    - CHROMADB_URL=http://chromadb:8000
    - FLASK_ENV=production
  depends_on:
    mistral:
      condition: service_started
    chromadb:
      condition: service_started
    db:
      condition: service_healthy

===============================================================================
2. D√âPENDANCES PYTHON (requirements.mistral.txt)
===============================================================================

# D√©pendances principales
flask==2.3.3
requests==2.31.0
sqlalchemy==2.0.23
pymysql==1.1.0

# Base de donn√©es vectorielle
chromadb==0.4.18

# NumPy compatible avec ChromaDB (version 1.x)
numpy==1.24.3

# Utilitaires
python-dotenv==1.0.0
pydantic==2.5.0

# Logging et monitoring
structlog==23.2.0

# S√©curit√©
cryptography>=41.0.0

# Note: sentence-transformers, transformers, torch sont comment√©s pour √©viter les conflits
# Ces fonctionnalit√©s sont remplac√©es par une approche simplifi√©e bas√©e sur SQLite

===============================================================================
3. API MISTRAL LEARNER (mistral_learner_simple.py)
===============================================================================

from flask import Flask, request, jsonify
import requests
import sqlite3
import hashlib
import os
import logging

app = Flask(__name__)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleEmbeddingDB:
    def __init__(self):
        db_path = '/app/embeddings_data/embeddings.db'
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        self.conn = sqlite3.connect(db_path)
        self.create_table()
    
    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS embeddings (
                id INTEGER PRIMARY KEY,
                payload_hash TEXT UNIQUE,
                payload TEXT,
                analysis TEXT,
                embedding_hash TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
    
    def store_embedding(self, payload_hash, payload, analysis):
        try:
            cursor = self.conn.cursor()
            embedding_hash = hashlib.md5(analysis.encode()).hexdigest()
            cursor.execute('''
                INSERT OR REPLACE INTO embeddings 
                (payload_hash, payload, analysis, embedding_hash)
                VALUES (?, ?, ?, ?)
            ''', (payload_hash, payload, analysis, embedding_hash))
            self.conn.commit()
            logger.info(f"Embedding stored: {payload_hash}")
            return True
        except Exception as e:
            logger.error(f"Error storing embedding: {e}")
            return False
    
    def find_similar(self, payload, limit=5):
        try:
            cursor = self.conn.cursor()
            # Recherche simple par mots-cl√©s
            keywords = payload.lower().split()
            placeholders = ','.join(['?' for _ in keywords])
            query = f'''
                SELECT payload, analysis, embedding_hash
                FROM embeddings
                WHERE LOWER(payload) LIKE '%' || ? || '%'
                OR LOWER(analysis) LIKE '%' || ? || '%'
                ORDER BY created_at DESC
                LIMIT ?
            '''
            cursor.execute(query, (keywords[0] if keywords else '', keywords[0] if keywords else '', limit))
            return cursor.fetchall()
        except Exception as e:
            logger.error(f"Error finding similar: {e}")
            return []

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({'status': 'healthy', 'service': 'mistral_learner'})

@app.route('/analyze', methods=['POST'])
def analyze_payload():
    try:
        data = request.get_json()
        payload = data.get('payload', '')
        
        if not payload:
            return jsonify({'error': 'Payload requis'}), 400
        
        logger.info(f"Analyzing payload: {payload[:100]}...")
        
        # Recherche d'analyses similaires
        db = SimpleEmbeddingDB()
        similar_analyses = db.find_similar(payload, limit=3)
        
        # Construction du contexte pour Mistral
        context = ""
        if similar_analyses:
            context = "\n\nAnalyses pr√©c√©dentes similaires:\n"
            for i, (prev_payload, prev_analysis, _) in enumerate(similar_analyses, 1):
                context += f"\n{i}. Payload: {prev_payload[:200]}...\nAnalyse: {prev_analysis[:300]}...\n"
        
        # Appel √† Ollama Mistral
        mistral_prompt = f"""
Analyse ce payload QRadar en d√©tail. Fournis une analyse structur√©e avec:
- Type de menace d√©tect√©e
- Niveau de risque (Faible/Moyen/√âlev√©/Critique)
- Recommandations de r√©ponse
- Indicateurs techniques

Payload √† analyser: {payload}

{context}

Analyse compl√®te:
"""
        
        response = requests.post('http://mistral:11434/api/generate', 
                               json={
                                   'model': 'mistral',
                                   'prompt': mistral_prompt,
                                   'stream': False
                               }, 
                               timeout=60)
        
        if response.status_code == 200:
            analysis = response.json()['response']
            
            # Stockage dans la DB simple
            payload_hash = hashlib.md5(payload.encode()).hexdigest()
            db.store_embedding(payload_hash, payload, analysis)
            
            logger.info(f"Analysis completed for payload: {payload_hash}")
            return jsonify({
                'analysis': analysis,
                'similar_found': len(similar_analyses),
                'payload_hash': payload_hash
            })
        else:
            logger.error(f"Mistral API error: {response.status_code}")
            return jsonify({'error': f'Erreur Mistral API: {response.status_code}'}), 500
            
    except requests.exceptions.Timeout:
        logger.error("Mistral API timeout")
        return jsonify({'error': 'Timeout Mistral API'}), 504
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return jsonify({'error': f'Erreur inattendue: {str(e)}'}), 500

@app.route('/learn', methods=['POST'])
def trigger_learning():
    """D√©clenche l'apprentissage sur les donn√©es existantes"""
    try:
        # Ici on pourrait ajouter une logique d'apprentissage plus avanc√©e
        return jsonify({'status': 'learning_triggered'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """Retourne les statistiques de la base d'embeddings"""
    try:
        db = SimpleEmbeddingDB()
        cursor = db.conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM embeddings')
        total = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(DISTINCT embedding_hash) FROM embeddings')
        unique = cursor.fetchone()[0]
        
        return jsonify({
            'total_embeddings': total,
            'unique_analyses': unique,
            'service': 'mistral_learner'
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=False)

===============================================================================
4. INT√âGRATION FRONTEND (app.py)
===============================================================================

# Variables d'environnement
MISTRAL_URL = os.getenv('MISTRAL_URL', 'http://mistral:11434')
MISTRAL_LEARNER_URL = os.getenv('MISTRAL_LEARNER_URL', 'http://mistral_learner:5001')

@app.route('/analyze_mistral', methods=['POST'])
def analyze_mistral():
    try:
        payload = request.json.get('payload')
        
        if not payload:
            return jsonify({'error': 'Payload requis'}), 400
        
        logger.info(f"[MISTRAL] Analyse demand√©e pour payload: {payload[:100]}...")
        
        # Appel au service Mistral Learner
        response = requests.post(f'{MISTRAL_LEARNER_URL}/analyze', 
                               json={'payload': payload}, 
                               timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            analysis = result['analysis']
            
            # Sauvegarde en DB MySQL
            save_analysis_to_db(payload, analysis, 'mistral')
            
            logger.info(f"[MISTRAL] Analyse termin√©e avec succ√®s")
            return jsonify({
                'analysis': analysis,
                'similar_found': result.get('similar_found', 0),
                'source': 'mistral'
            })
        else:
            error_msg = f'[ERREUR MISTRAL] {response.text}'
            logger.error(f"[MISTRAL] {error_msg}")
            return jsonify({'error': error_msg}), 500
            
    except requests.exceptions.Timeout:
        error_msg = '[ERREUR MISTRAL] Timeout - Service non disponible'
        logger.error(f"[MISTRAL] {error_msg}")
        return jsonify({'error': error_msg}), 504
    except Exception as e:
        error_msg = f'[ERREUR MISTRAL] {str(e)}'
        logger.error(f"[MISTRAL] {error_msg}")
        return jsonify({'error': error_msg}), 500

===============================================================================
5. SCRIPT DE D√âPLOIEMENT (deploy_complete.sh)
===============================================================================

#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ D√âPLOIEMENT COMPLET MISTRAL${NC}"
echo "=================================="

# 1. V√©rification de Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker non install√©${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose non install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker et Docker Compose disponibles${NC}"

# 2. Nettoyage complet
echo -e "${YELLOW}üßπ Nettoyage complet...${NC}"
cd Docker
docker-compose down -v
docker system prune -f
docker volume prune -f

# 3. V√©rification des fichiers
echo -e "${YELLOW}üìÅ V√©rification des fichiers...${NC}"
required_files=(
    "docker-compose.yml"
    "Dockerfile"
    "Dockerfile.mistral"
    "../requirements.mistral.txt"
    "../mistral_learner_simple.py"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Fichier manquant: $file${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Tous les fichiers requis pr√©sents${NC}"

# 4. Construction des images
echo -e "${YELLOW}üî® Construction des images Docker...${NC}"
docker-compose build --no-cache

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de la construction${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Images construites avec succ√®s${NC}"

# 5. D√©marrage des services
echo -e "${YELLOW}üöÄ D√©marrage des services...${NC}"
docker-compose up -d

# 6. Attente des services
echo -e "${YELLOW}‚è≥ Attente des services...${NC}"

# Attendre MySQL
echo "Attente de MySQL..."
for i in {1..30}; do
    if docker-compose exec -T db mysqladmin ping -h localhost --silent; then
        echo -e "${GREEN}‚úÖ MySQL pr√™t${NC}"
        break
    fi
    sleep 2
done

# Attendre ChromaDB
echo "Attente de ChromaDB..."
for i in {1..20}; do
    if curl -s http://localhost:8000/api/v1/heartbeat > /dev/null; then
        echo -e "${GREEN}‚úÖ ChromaDB pr√™t${NC}"
        break
    fi
    sleep 3
done

# Attendre Mistral
echo "Attente de Mistral..."
for i in {1..30}; do
    if curl -s http://localhost:11434/api/tags > /dev/null; then
        echo -e "${GREEN}‚úÖ Mistral pr√™t${NC}"
        break
    fi
    sleep 5
done

# Attendre Mistral Learner
echo "Attente de Mistral Learner..."
for i in {1..20}; do
    if curl -s http://localhost:5001/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Mistral Learner pr√™t${NC}"
        break
    fi
    sleep 3
done

# 7. Initialisation de la base de donn√©es
echo -e "${YELLOW}üóÑÔ∏è Initialisation de la base de donn√©es...${NC}"
cd ..
python3 init_db.py
python3 init_admin.py

# 8. T√©l√©chargement du mod√®le Mistral
echo -e "${YELLOW}üì• T√©l√©chargement du mod√®le Mistral...${NC}"
echo "‚è≥ Cela peut prendre plusieurs minutes..."
curl -X POST http://localhost:11434/api/pull -d '{"name": "mistral"}' &
MISTRAL_DOWNLOAD_PID=$!

# Attendre un peu pour le t√©l√©chargement
sleep 10

# 9. Test des services
echo -e "${YELLOW}üß™ Test des services...${NC}"
python3 init_mistral_now.py

# 10. Statut final
echo -e "${BLUE}üìä STATUT FINAL${NC}"
echo "=================="
docker-compose ps

echo -e "${GREEN}üéâ D√©ploiement termin√© !${NC}"
echo ""
echo -e "${BLUE}üì± Acc√®s aux services:${NC}"
echo "  ‚Ä¢ Application Web: http://localhost"
echo "  ‚Ä¢ Mistral API: http://localhost:11434"
echo "  ‚Ä¢ ChromaDB: http://localhost:8000"
echo "  ‚Ä¢ Mistral Learner: http://localhost:5001"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è Le t√©l√©chargement du mod√®le Mistral continue en arri√®re-plan${NC}"

===============================================================================
6. SCRIPT DE TEST (init_mistral_now.py)
===============================================================================

import requests
import time
import sys

def print_status(message, status="INFO"):
    colors = {
        "INFO": "\033[94m",    # Blue
        "SUCCESS": "\033[92m", # Green
        "ERROR": "\033[91m",   # Red
        "WARNING": "\033[93m"  # Yellow
    }
    color = colors.get(status, "\033[0m")
    print(f"{color}{message}\033[0m")

def wait_for_mistral():
    """Attend que Mistral soit pr√™t"""
    print_status("‚è≥ Attente de Mistral...", "INFO")
    for i in range(30):
        try:
            response = requests.get('http://localhost:11434/api/tags', timeout=5)
            if response.status_code == 200:
                print_status("‚úÖ Mistral est pr√™t!", "SUCCESS")
                return True
        except:
            pass
        time.sleep(2)
    
    print_status("‚ùå Mistral non disponible", "ERROR")
    return False

def check_mistral_model():
    """V√©rifie si le mod√®le Mistral est t√©l√©charg√©"""
    try:
        response = requests.get('http://localhost:11434/api/tags', timeout=5)
        if response.status_code == 200:
            models = response.json().get('models', [])
            for model in models:
                if 'mistral' in model.get('name', '').lower():
                    print_status(f"‚úÖ Mod√®le Mistral trouv√©: {model['name']}", "SUCCESS")
                    return True
        return False
    except:
        return False

def download_mistral_model():
    """T√©l√©charge le mod√®le Mistral"""
    print_status("‚ùå Mod√®le Mistral non trouv√©", "WARNING")
    print_status("üì• T√©l√©chargement du mod√®le Mistral...", "INFO")
    
    try:
        response = requests.post('http://localhost:11434/api/pull', 
                               json={'name': 'mistral'}, 
                               timeout=1)  # Timeout court pour lancer le t√©l√©chargement
        
        if response.status_code == 200:
            print_status("üì• T√©l√©chargement du mod√®le Mistral...", "INFO")
            print_status("‚è≥ Cela peut prendre plusieurs minutes...", "WARNING")
            return True
        else:
            print_status(f"‚ùå Erreur t√©l√©chargement: {response.status_code}", "ERROR")
            return False
    except requests.exceptions.Timeout:
        print_status("üì• T√©l√©chargement du mod√®le Mistral...", "INFO")
        print_status("‚è≥ Cela peut prendre plusieurs minutes...", "WARNING")
        return True
    except Exception as e:
        print_status(f"‚ùå Erreur t√©l√©chargement: {e}", "ERROR")
        return False

def test_mistral_api():
    """Test l'API Mistral"""
    print_status("üß™ Test de l'API Mistral...", "INFO")
    try:
        response = requests.post('http://localhost:11434/api/generate', 
                               json={
                                   'model': 'mistral',
                                   'prompt': 'Test simple',
                                   'stream': False
                               }, 
                               timeout=30)
        
        if response.status_code == 200:
            print_status("‚úÖ API Mistral fonctionnelle", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå Erreur test API: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur test API: {e}", "ERROR")
        return False

def test_mistral_learner():
    """Test le service d'apprentissage"""
    print_status("üß† Test du service d'apprentissage...", "INFO")
    try:
        response = requests.get('http://localhost:5001/health', timeout=5)
        if response.status_code == 200:
            print_status("‚úÖ Service d'apprentissage pr√™t", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå Erreur service d'apprentissage: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur service d'apprentissage: {e}", "ERROR")
        return False

def test_web_application():
    """Test l'application web principale"""
    print_status("üåê Test de l'application web...", "INFO")
    try:
        response = requests.get('http://localhost', timeout=5)
        if response.status_code == 200:
            print_status("‚úÖ Application web pr√™te!", "SUCCESS")
            return True
        else:
            print_status(f"‚ùå Erreur application web: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        print_status(f"‚ùå Erreur application web: {e}", "ERROR")
        return False

def main():
    print_status("üöÄ INITIALISATION RAPIDE MISTRAL", "INFO")
    print_status("================================", "INFO")
    
    # 1. Attendre Mistral
    if not wait_for_mistral():
        return False
    
    # 2. V√©rifier le mod√®le
    if not check_mistral_model():
        download_mistral_model()
    
    print_status("", "INFO")
    print_status("üß™ TESTS", "INFO")
    print_status("========", "INFO")
    
    # 3. Tests
    tests = [
        test_mistral_api,
        test_mistral_learner,
        test_web_application
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    # 4. R√©sultats
    print_status("", "INFO")
    print_status(f"üìä R√âSULTATS: {passed}/{total} tests r√©ussis", "INFO")
    
    if passed == total:
        print_status("‚úÖ TOUS LES TESTS R√âUSSIS", "SUCCESS")
        return True
    else:
        print_status("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â", "WARNING")
        print_status("üîß V√©rifiez les logs des conteneurs", "WARNING")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

===============================================================================
7. ORDRE DE D√âMARRAGE DES SERVICES
===============================================================================

1. MySQL (base de donn√©es principale)
   - Port: 3306
   - Healthcheck: mysqladmin ping
   - Condition: service_healthy

2. ChromaDB (base vectorielle)
   - Port: 8000
   - Healthcheck: wget /api/v1/heartbeat
   - Condition: service_started

3. Ollama (service Mistral)
   - Port: 11434
   - Healthcheck: wget /api/tags
   - Condition: service_started

4. Mistral Learner (notre API)
   - Port: 5001
   - D√©pend de: mistral, chromadb
   - Condition: service_started

5. Web App (Flask)
   - Port: 5000
   - D√©pend de: db, mistral_learner
   - Condition: service_started

6. Nginx (reverse proxy)
   - Port: 80
   - D√©pend de: web
   - Condition: service_started

===============================================================================
8. POINTS CL√âS DE LA M√âTHODE
===============================================================================

‚úÖ AVANTAGES :
- Local : Tout fonctionne en local, pas d'API externe
- Apprentissage : Le syst√®me apprend des analyses pr√©c√©dentes
- Scalable : Peut g√©rer plusieurs mod√®les
- Robuste : Healthchecks et red√©marrage automatique
- S√©curis√© : Pas de donn√©es envoy√©es √† l'ext√©rieur

üîß R√âSOLUTION DES PROBL√àMES :
- NumPy 2.0 ‚Üí Forcer NumPy 1.24.3
- ChromaDB ‚Üí Version 0.4.18 compatible
- D√©pendances ‚Üí √âviter les conflits de versions
- Network ‚Üí Utiliser les noms de services Docker
- Permissions ‚Üí Utiliser des volumes Docker

üìä MONITORING :
# V√©rifier les services
docker ps

# Logs en temps r√©el
docker logs -f mistral_learner

# Test rapide
curl -X POST http://localhost:5001/health

# Statistiques
curl http://localhost:5001/stats

===============================================================================
9. UTILISATION FRONTEND
===============================================================================

// Dans dashboard.html
function analyzeWithMistral() {
    const payload = document.getElementById('payload').value;
    const resultDiv = document.getElementById('result');
    
    // Afficher loading
    resultDiv.innerHTML = '<div class="loading">Analyse Mistral en cours...</div>';
    
    fetch('/analyze_mistral', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({payload: payload})
    })
    .then(response => response.json())
    .then(data => {
        if (data.analysis) {
            resultDiv.innerHTML = `
                <div class="analysis-result">
                    <h4>Analyse Mistral</h4>
                    <div class="analysis-content">${data.analysis}</div>
                    ${data.similar_found > 0 ? 
                        `<div class="similar-info">üìö ${data.similar_found} analyses similaires trouv√©es</div>` : 
                        ''
                    }
                </div>
            `;
        } else {
            resultDiv.innerHTML = `<div class="error">Erreur: ${data.error}</div>`;
        }
    })
    .catch(error => {
        resultDiv.innerHTML = `<div class="error">Erreur r√©seau: ${error}</div>`;
    });
}

===============================================================================
10. COMMANDES UTILES
===============================================================================

# D√©marrage complet
./deploy_complete.sh

# D√©marrage rapide
cd Docker && docker-compose up -d

# V√©rification des services
docker-compose ps

# Logs d'un service sp√©cifique
docker logs mistral_learner
docker logs mistral_ai
docker logs chromadb_vector

# Test rapide Mistral
curl -X POST http://localhost:11434/api/generate \
  -H "Content-Type: application/json" \
  -d '{"model": "mistral", "prompt": "Hello", "stream": false}'

# Test Mistral Learner
curl -X POST http://localhost:5001/analyze \
  -H "Content-Type: application/json" \
  -d '{"payload": "test payload"}'

# Nettoyage complet
docker-compose down -v
docker system prune -f

# Rebuild d'un service
docker-compose build --no-cache mistral_learner
docker-compose up -d mistral_learner

===============================================================================
11. D√âPANNAGE
===============================================================================

PROBL√àME: "NumPy 2.0 incompatibility"
SOLUTION: Forcer numpy==1.24.3 dans requirements.mistral.txt

PROBL√àME: "ChromaDB connection refused"
SOLUTION: V√©rifier que ChromaDB est d√©marr√© et accessible sur le port 8000

PROBL√àME: "Mistral model not found"
SOLUTION: T√©l√©charger le mod√®le avec curl -X POST http://localhost:11434/api/pull -d '{"name": "mistral"}'

PROBL√àME: "Mistral Learner unhealthy"
SOLUTION: V√©rifier les logs et reconstruire l'image avec --no-cache

PROBL√àME: "Permission denied"
SOLUTION: V√©rifier les permissions des volumes Docker

===============================================================================
12. CONCLUSION
===============================================================================

Cette m√©thode garantit un environnement Mistral :
- ‚úÖ Stable et local
- ‚úÖ Auto-apprenant
- ‚úÖ Int√©gr√© √† l'application QRadar
- ‚úÖ Facilement d√©ployable
- ‚úÖ Robuste et monitorable

Le syst√®me est pr√™t pour l'analyse de payloads QRadar avec apprentissage automatique ! üéØ

=============================================================================== 