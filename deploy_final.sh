#!/bin/bash

# Script de d√©ploiement final pour TGI Mistral
# Architecture moderne avec RAG et apprentissage

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ D√âPLOIEMENT FINAL TGI MISTRAL${NC}"
echo "====================================="

# 1. V√©rification de Docker
echo -e "${YELLOW}üîç V√©rification de Docker...${NC}"
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker non install√©${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose non install√©${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker et Docker Compose disponibles${NC}"

# 2. V√©rification du token Hugging Face
if [ -z "$HF_HUB_TOKEN" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è HF_HUB_TOKEN non d√©fini${NC}"
    echo "Le mod√®le sera t√©l√©charg√© automatiquement par TGI"
    echo "Pour un d√©ploiement optimal, d√©finissez HF_HUB_TOKEN"
else
    echo -e "${GREEN}‚úÖ HF_HUB_TOKEN configur√©${NC}"
fi

# 3. Nettoyage complet
echo -e "${YELLOW}üßπ Nettoyage complet...${NC}"
cd Docker
docker-compose down -v 2>/dev/null || true
docker system prune -f
docker volume prune -f

# 4. V√©rification des fichiers
echo -e "${YELLOW}üìÅ V√©rification des fichiers...${NC}"
required_files=(
    "docker-compose.yml"
    "retriever/Dockerfile"
    "retriever/requirements.txt"
    "retriever/app.py"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo -e "${RED}‚ùå Fichier manquant: $file${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Tous les fichiers requis pr√©sents${NC}"

# 5. Cr√©ation des dossiers
echo -e "${YELLOW}üìÅ Cr√©ation des dossiers...${NC}"
mkdir -p models
mkdir -p cache
mkdir -p retriever-data

# 6. Construction des images
echo -e "${YELLOW}üî® Construction des images Docker...${NC}"
docker-compose build --no-cache

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de la construction${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Images construites avec succ√®s${NC}"

# 7. D√©marrage des services
echo -e "${YELLOW}üöÄ D√©marrage des services...${NC}"
docker-compose up -d

# 8. Attente des services
echo -e "${YELLOW}‚è≥ Attente des services...${NC}"

# Attendre MySQL
echo "Attente de MySQL..."
for i in {1..30}; do
    if docker-compose exec -T db mysqladmin ping -h localhost --silent 2>/dev/null; then
        echo -e "${GREEN}‚úÖ MySQL pr√™t${NC}"
        break
    fi
    sleep 2
done

# Attendre ChromaDB
echo "Attente de ChromaDB..."
for i in {1..20}; do
    if curl -s http://localhost:8000/api/v1/heartbeat >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ ChromaDB pr√™t${NC}"
        break
    fi
    sleep 3
done

# Attendre TGI Mistral
echo "Attente de TGI Mistral..."
for i in {1..60}; do
    if curl -s http://localhost:8080/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ TGI Mistral pr√™t${NC}"
        break
    fi
    sleep 5
done

# Attendre Retriever
echo "Attente du Retriever..."
for i in {1..20}; do
    if curl -s http://localhost:5001/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Retriever pr√™t${NC}"
        break
    fi
    sleep 3
done

# 9. Initialisation de la base de donn√©es
echo -e "${YELLOW}üóÑÔ∏è Initialisation de la base de donn√©es...${NC}"
cd ..
python3 init_db.py
python3 init_admin.py

# 10. Test des services
echo -e "${YELLOW}üß™ Test des services...${NC}"

# Test TGI
echo "Test TGI Mistral..."
if curl -s http://localhost:8080/health >/dev/null; then
    echo -e "${GREEN}‚úÖ TGI Mistral fonctionnel${NC}"
else
    echo -e "${RED}‚ùå TGI Mistral non accessible${NC}"
fi

# Test ChromaDB
echo "Test ChromaDB..."
if curl -s http://localhost:8000/api/v1/heartbeat >/dev/null; then
    echo -e "${GREEN}‚úÖ ChromaDB fonctionnel${NC}"
else
    echo -e "${RED}‚ùå ChromaDB non accessible${NC}"
fi

# Test Retriever
echo "Test Retriever..."
if curl -s http://localhost:5001/health >/dev/null; then
    echo -e "${GREEN}‚úÖ Retriever fonctionnel${NC}"
else
    echo -e "${RED}‚ùå Retriever non accessible${NC}"
fi

# Test d'analyse
echo "Test d'analyse..."
TEST_RESPONSE=$(curl -s -X POST http://localhost:5001/analyze \
  -H "Content-Type: application/json" \
  -d '{"payload":"Test payload QRadar"}' 2>/dev/null || echo "{}")

if echo "$TEST_RESPONSE" | grep -q "analysis"; then
    echo -e "${GREEN}‚úÖ Test d'analyse r√©ussi${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Test d'analyse √©chou√© (normal au premier d√©marrage)${NC}"
fi

# 11. Statut final
echo -e "${BLUE}üìä STATUT FINAL${NC}"
echo "=================="
cd Docker
docker-compose ps

echo ""
echo -e "${GREEN}üéâ D√©ploiement termin√© !${NC}"
echo ""
echo -e "${BLUE}üì± Acc√®s aux services:${NC}"
echo "  ‚Ä¢ Application Web: http://localhost"
echo "  ‚Ä¢ TGI Mistral API: http://localhost:8080"
echo "  ‚Ä¢ ChromaDB: http://localhost:8000"
echo "  ‚Ä¢ Retriever API: http://localhost:5001"
echo ""
echo -e "${BLUE}üîß Commandes utiles:${NC}"
echo "  ‚Ä¢ Logs: docker-compose logs -f [service]"
echo "  ‚Ä¢ Red√©marrer: docker-compose restart [service]"
echo "  ‚Ä¢ Arr√™ter: docker-compose down"
echo "  ‚Ä¢ Test complet: python3 test_tgi_mistral.py"
echo ""
echo -e "${YELLOW}üìö Documentation: METHODE_MISTRAL.txt${NC}" 