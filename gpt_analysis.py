import os
import requests
import json
import logging
from typing import Dict, Any, Optional

# Configuration du logging
logger = logging.getLogger(__name__)

def analyze_payload_with_gpt(payload_dict: Dict[str, Any], api_key: str, custom_prompt: Optional[str] = None) -> Dict[str, Any]:
    """
    Analyse un payload avec GPT via l'API OpenAI ou un service local
    
    Args:
        payload_dict: Dictionnaire contenant les donn√©es du payload
        api_key: Cl√© API pour le service GPT
        custom_prompt: Prompt personnalis√© optionnel
    
    Returns:
        Dict contenant l'analyse et les m√©tadonn√©es
    """
    try:
        print(f"ü§ñ [GPT_ANALYSIS] D√©but de l'analyse GPT")
        print(f"üìä [GPT_ANALYSIS] Type de payload: {type(payload_dict)}")
        print(f"üîë [GPT_ANALYSIS] Cl√© API fournie: {'Oui' if api_key else 'Non'}")
        print(f"üéØ [GPT_ANALYSIS] Prompt personnalis√©: {'Oui' if custom_prompt else 'Non'}")
        logger.info("üîç D√©but de l'analyse GPT du payload")
        
        # Pr√©parer le payload pour l'analyse
        payload_text = str(payload_dict)
        
        # Prompt par d√©faut pour l'analyse de s√©curit√©
        default_prompt = """
Tu es un expert en cybers√©curit√© sp√©cialis√© dans l'analyse de logs QRadar.

IMPORTANT: R√©ponds UNIQUEMENT en fran√ßais. Ne jamais utiliser l'espagnol ou l'anglais.

Payload √† analyser:
{payload}

Fournis une analyse structur√©e et d√©taill√©e en fran√ßais incluant:
1. Type de menace d√©tect√©e
2. Niveau de risque (Faible/Moyen/√âlev√©/Critique)
3. Recommandations de r√©ponse imm√©diate
4. Indicateurs techniques (IOC)
5. Actions de rem√©diation

Analyse compl√®te (en fran√ßais uniquement):
"""
        
        # Utiliser le prompt personnalis√© ou le prompt par d√©faut
        prompt = custom_prompt if custom_prompt else default_prompt.format(payload=payload_text)
        
        # Configuration de la requ√™te
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                    "role": "system",
                    "content": "Tu es un expert en cybers√©curit√© sp√©cialis√© dans l'analyse de logs QRadar. R√©ponds toujours en fran√ßais."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 1000,
            "temperature": 0.7
        }
        
        # Appel √† l'API OpenAI
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            analysis = result["choices"][0]["message"]["content"]
            
            print(f"‚úÖ [GPT_ANALYSIS] Analyse GPT r√©ussie")
            print(f"üìù [GPT_ANALYSIS] Longueur de l'analyse: {len(analysis)} caract√®res")
            print(f"üéØ [GPT_ANALYSIS] Mod√®le utilis√©: gpt-3.5-turbo")
            print(f"üî¢ [GPT_ANALYSIS] Tokens utilis√©s: {result.get('usage', {}).get('total_tokens', 0)}")
            
            logger.info("‚úÖ Analyse GPT r√©ussie")
            
            return {
                "success": True,
                "analysis": analysis,
                "model": "gpt-3.5-turbo",
                "tokens_used": result.get("usage", {}).get("total_tokens", 0),
                "timestamp": result.get("created", "")
            }
        else:
            print(f"‚ùå [GPT_ANALYSIS] Erreur API GPT: {response.status_code}")
            print(f"üìÑ [GPT_ANALYSIS] R√©ponse: {response.text[:200]}...")
            logger.error(f"‚ùå Erreur API GPT: {response.status_code}")
            return {
                "success": False,
                "error": f"Erreur API: {response.status_code}",
                "analysis": "Erreur lors de l'analyse GPT"
            }
            
    except requests.exceptions.Timeout:
        print(f"‚è∞ [GPT_ANALYSIS] Timeout lors de l'appel GPT")
        logger.error("‚è∞ Timeout lors de l'appel GPT")
        return {
            "success": False,
            "error": "Timeout",
            "analysis": "Timeout lors de l'analyse GPT"
        }
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå [GPT_ANALYSIS] Erreur de connexion GPT: {e}")
        logger.error(f"‚ùå Erreur de connexion GPT: {e}")
        return {
            "success": False,
            "error": f"Erreur de connexion: {str(e)}",
            "analysis": "Erreur de connexion lors de l'analyse GPT"
        }
    except Exception as e:
        print(f"‚ùå [GPT_ANALYSIS] Erreur inattendue GPT: {e}")
        logger.error(f"‚ùå Erreur inattendue GPT: {e}")
        return {
            "success": False,
            "error": f"Erreur inattendue: {str(e)}",
            "analysis": "Erreur inattendue lors de l'analyse GPT"
        }

def generate_short_summary(text: str, api_key: str, max_length: int = 200) -> str:
    """
    G√©n√®re un r√©sum√© court d'un texte avec GPT
    
    Args:
        text: Texte √† r√©sumer
        api_key: Cl√© API pour le service GPT
        max_length: Longueur maximale du r√©sum√©
    
    Returns:
        R√©sum√© du texte
    """
    try:
        logger.info("üìù G√©n√©ration du r√©sum√© GPT")
        
        prompt = f"""
R√©sume ce texte en fran√ßais en maximum {max_length} caract√®res:

{text}

R√©sum√©:
"""
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                    "role": "system",
                    "content": "Tu es un expert en r√©sum√©. R√©ponds toujours en fran√ßais de mani√®re concise."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 100,
            "temperature": 0.3
        }
        
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            summary = result["choices"][0]["message"]["content"].strip()
            
            logger.info("‚úÖ R√©sum√© GPT g√©n√©r√©")
            return summary
        else:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©sum√©: {response.status_code}")
            return text[:max_length] + "..." if len(text) > max_length else text
            
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©sum√© GPT: {e}")
        return text[:max_length] + "..." if len(text) > max_length else text

def test_gpt_connection(api_key: str) -> bool:
    """
    Teste la connexion √† l'API GPT
    
    Args:
        api_key: Cl√© API pour le service GPT
    
    Returns:
        True si la connexion fonctionne, False sinon
    """
    try:
        logger.info("üß™ Test de connexion GPT")
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {
                    "role": "user",
                    "content": "Test de connexion - r√©ponds 'OK'"
                }
            ],
            "max_tokens": 10
        }
        
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=10
        )
        
        if response.status_code == 200:
            logger.info("‚úÖ Connexion GPT OK")
            return True
        else:
            logger.error(f"‚ùå Erreur connexion GPT: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test connexion GPT: {e}")
        return False 