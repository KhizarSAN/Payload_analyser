#!/bin/bash

# =============================================================================
# SCRIPT DE DEBUG OLLAMA
# =============================================================================
# Debug les probl√®mes de connexion Ollama
# Usage: ./debug_ollama.sh
# =============================================================================

set -e

echo "üîç DEBUG OLLAMA"
echo "==============="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =============================================================================
# √âTAPE 1: V√âRIFICATION DES CONTENEURS
# =============================================================================

log_info "V√©rification des conteneurs Docker..."

cd Docker

# V√©rifier l'√©tat des conteneurs
docker compose ps

echo ""
log_info "Logs du conteneur Ollama:"
docker compose logs --tail=20 ollama

echo ""
log_info "Logs du conteneur Retriever:"
docker compose logs --tail=20 retriever

# =============================================================================
# √âTAPE 2: TEST DE CONNEXION OLLAMA
# =============================================================================

echo ""
log_info "Test de connexion Ollama depuis l'h√¥te..."

# Test depuis l'h√¥te
if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
    log_success "‚úÖ Ollama accessible depuis l'h√¥te (localhost:11434)"
else
    log_error "‚ùå Ollama non accessible depuis l'h√¥te"
fi

# Test depuis le r√©seau Docker
log_info "Test de connexion Ollama depuis le r√©seau Docker..."

# Cr√©er un conteneur temporaire pour tester
docker run --rm --network docker_default alpine/curl:latest \
  curl -s http://ollama:11434/api/tags >/dev/null 2>&1

if [ $? -eq 0 ]; then
    log_success "‚úÖ Ollama accessible depuis le r√©seau Docker (ollama:11434)"
else
    log_error "‚ùå Ollama non accessible depuis le r√©seau Docker"
fi

# =============================================================================
# √âTAPE 3: V√âRIFICATION DES MOD√àLES
# =============================================================================

echo ""
log_info "V√©rification des mod√®les install√©s..."

MODELS_RESPONSE=$(curl -s http://localhost:11434/api/tags)
if echo "$MODELS_RESPONSE" | grep -q '"models":\[\]'; then
    log_warning "‚ö†Ô∏è Aucun mod√®le install√©"
else
    log_success "‚úÖ Mod√®les install√©s:"
    echo "$MODELS_RESPONSE" | jq -r '.models[]?.name' 2>/dev/null || echo "$MODELS_RESPONSE"
fi

# =============================================================================
# √âTAPE 4: TEST DU MOD√àLE MISTRAL
# =============================================================================

echo ""
log_info "Test du mod√®le mistral:7b..."

TEST_RESPONSE=$(curl -s -X POST http://localhost:11434/api/generate \
  -H "Content-Type: application/json" \
  -d '{"model": "mistral:7b", "prompt": "Bonjour", "stream": false}' \
  --max-time 30)

if echo "$TEST_RESPONSE" | grep -q "response"; then
    log_success "‚úÖ mistral:7b fonctionne"
    echo "R√©ponse: $(echo "$TEST_RESPONSE" | jq -r '.response' | head -2)"
else
    log_error "‚ùå mistral:7b ne r√©pond pas"
    echo "R√©ponse: $TEST_RESPONSE"
fi

# =============================================================================
# √âTAPE 5: TEST DE L'API RETRIEVER
# =============================================================================

echo ""
log_info "Test de l'API Retriever..."

if curl -s http://localhost:5001/health >/dev/null 2>&1; then
    log_success "‚úÖ API Retriever accessible"
    
    HEALTH_RESPONSE=$(curl -s http://localhost:5001/health)
    echo "Health: $HEALTH_RESPONSE"
else
    log_error "‚ùå API Retriever non accessible"
fi

# =============================================================================
# √âTAPE 6: SUGGESTIONS
# =============================================================================

echo ""
echo "üìã SUGGESTIONS:"
echo "=============="

log_info "Si Ollama ne r√©pond pas:"
echo "1. docker compose restart ollama"
echo "2. Attendre 30 secondes"
echo "3. V√©rifier les logs: docker compose logs ollama"

log_info "Si le mod√®le ne fonctionne pas:"
echo "1. R√©installer le mod√®le: curl -X POST http://localhost:11434/api/pull -d '{\"name\": \"mistral:7b\"}'"
echo "2. V√©rifier l'espace disque disponible"

log_info "Si l'API Retriever ne fonctionne pas:"
echo "1. docker compose restart retriever"
echo "2. V√©rifier les logs: docker compose logs retriever"

log_success "Debug termin√© ! üéØ" 