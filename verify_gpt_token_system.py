#!/usr/bin/env python3
"""
Script de v√©rification du syst√®me de tokens GPT personnels
V√©rifie la structure de la base de donn√©es et les fonctions cl√©s
"""

import os
import sys

# Ajouter le r√©pertoire courant au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verify_database_structure():
    """V√©rifie la structure de la base de donn√©es"""
    print("üîç V√©rification de la structure de la base de donn√©es...")
    try:
        from db_config import User, SessionLocal
        
        # V√©rifier que la table User a la colonne api_key
        user_columns = User.__table__.columns.keys()
        print(f"üìã Colonnes de la table User: {user_columns}")
        
        if 'api_key' in user_columns:
            print("‚úÖ Colonne api_key pr√©sente dans la table User")
            return True
        else:
            print("‚ùå Colonne api_key manquante dans la table User")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la structure DB: {e}")
        return False

def verify_get_openai_api_key_function():
    """V√©rifie la fonction get_openai_api_key"""
    print("\nüîç V√©rification de la fonction get_openai_api_key...")
    try:
        from app import get_openai_api_key
        
        # V√©rifier que la fonction existe et peut √™tre appel√©e
        print("‚úÖ Fonction get_openai_api_key import√©e avec succ√®s")
        
        # V√©rifier la signature de la fonction
        import inspect
        sig = inspect.signature(get_openai_api_key)
        params = list(sig.parameters.keys())
        print(f"üìù Param√®tres de la fonction: {params}")
        
        if 'user_id' in params or len(params) == 0:
            print("‚úÖ Signature de fonction correcte")
            return True
        else:
            print("‚ùå Signature de fonction incorrecte")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de get_openai_api_key: {e}")
        return False

def verify_api_config_routes():
    """V√©rifie les routes de configuration API"""
    print("\nüåê V√©rification des routes de configuration API...")
    try:
        from app import app
        
        # V√©rifier que les routes existent
        routes = [rule.rule for rule in app.url_map.iter_rules()]
        
        api_routes = [
            '/api/profile/api-config',
            '/api/profile/api-status'
        ]
        
        for route in api_routes:
            if route in routes:
                print(f"‚úÖ Route {route} pr√©sente")
            else:
                print(f"‚ùå Route {route} manquante")
                return False
        
        print("‚úÖ Toutes les routes API de configuration sont pr√©sentes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des routes: {e}")
        return False

def verify_gpt_analysis_function():
    """V√©rifie la fonction d'analyse GPT"""
    print("\nü§ñ V√©rification de la fonction d'analyse GPT...")
    try:
        from gpt_analysis import analyze_payload_with_gpt
        
        # V√©rifier que la fonction existe
        print("‚úÖ Fonction analyze_payload_with_gpt import√©e avec succ√®s")
        
        # V√©rifier la signature
        import inspect
        sig = inspect.signature(analyze_payload_with_gpt)
        params = list(sig.parameters.keys())
        print(f"üìù Param√®tres de la fonction: {params}")
        
        required_params = ['payload_dict', 'api_key']
        for param in required_params:
            if param in params:
                print(f"‚úÖ Param√®tre {param} pr√©sent")
            else:
                print(f"‚ùå Param√®tre {param} manquant")
                return False
        
        print("‚úÖ Signature de la fonction d'analyse GPT correcte")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de l'analyse GPT: {e}")
        return False

def verify_analyze_ia_function():
    """V√©rifie la fonction analyze_ia dans app.py"""
    print("\nüîç V√©rification de la fonction analyze_ia...")
    try:
        # Lire le fichier app.py pour v√©rifier la logique
        with open('app.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier les √©l√©ments cl√©s
        checks = [
            ("get_openai_api_key(user_id)", "Appel de get_openai_api_key avec user_id"),
            ("analyze_payload_with_gpt", "Appel de la fonction d'analyse GPT"),
            ("ia_response.get(\"success\", False)", "V√©rification du succ√®s de l'analyse"),
            ("ia_text = ia_response.get(\"analysis\", \"\")", "Extraction du texte d'analyse"),
            ("store_analysis", "Stockage en base de donn√©es")
        ]
        
        for check_text, description in checks:
            if check_text in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description} manquant")
                return False
        
        print("‚úÖ Logique de la fonction analyze_ia correcte")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de analyze_ia: {e}")
        return False

def verify_logging_integration():
    """V√©rifie l'int√©gration du logging"""
    print("\nüìù V√©rification de l'int√©gration du logging...")
    try:
        from logger import log_action, log_error, log_success
        
        print("‚úÖ Fonctions de logging import√©es avec succ√®s")
        
        # V√©rifier que le logging est utilis√© dans les fonctions cl√©s
        with open('app.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        logging_checks = [
            ("log_action", "Logging des actions"),
            ("log_error", "Logging des erreurs"),
            ("log_success", "Logging des succ√®s")
        ]
        
        for check_text, description in logging_checks:
            if check_text in content:
                print(f"‚úÖ {description} int√©gr√©")
            else:
                print(f"‚ö†Ô∏è {description} non trouv√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du logging: {e}")
        return False

def main():
    """Fonction principale de v√©rification"""
    print("üöÄ V√©rification du syst√®me de tokens GPT personnels")
    print("=" * 60)
    
    verifications = [
        ("Structure de la base de donn√©es", verify_database_structure),
        ("Fonction get_openai_api_key", verify_get_openai_api_key_function),
        ("Routes de configuration API", verify_api_config_routes),
        ("Fonction d'analyse GPT", verify_gpt_analysis_function),
        ("Fonction analyze_ia", verify_analyze_ia_function),
        ("Int√©gration du logging", verify_logging_integration)
    ]
    
    results = []
    
    for verification_name, verification_func in verifications:
        print(f"\n{'='*20} {verification_name} {'='*20}")
        try:
            success = verification_func()
            results.append((verification_name, success))
        except Exception as e:
            print(f"‚ùå Exception dans {verification_name}: {e}")
            results.append((verification_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for verification_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {verification_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} v√©rifications r√©ussies")
    
    if passed == total:
        print("üéâ Toutes les v√©rifications sont pass√©es!")
        print("\nüìã R√âSUM√â DU SYST√àME DE TOKENS GPT PERSONNELS:")
        print("‚úÖ La table User contient la colonne api_key pour stocker les cl√©s personnelles")
        print("‚úÖ La fonction get_openai_api_key() r√©cup√®re d'abord la cl√© personnelle de l'utilisateur")
        print("‚úÖ Les routes API permettent de configurer et g√©rer les cl√©s personnelles")
        print("‚úÖ La fonction analyze_ia utilise la cl√© personnelle via get_openai_api_key(user_id)")
        print("‚úÖ L'analyse GPT est effectu√©e avec la cl√© personnelle")
        print("‚úÖ Les r√©sultats sont stock√©s en base de donn√©es avec l'ID utilisateur")
        print("‚úÖ Le logging est int√©gr√© pour tracer les actions")
        
        print("\nüîÑ FLUX COMPLET:")
        print("1. L'utilisateur sauvegarde sa cl√© API personnelle via /api/profile/api-config")
        print("2. La cl√© est stock√©e dans la table User.api_key pour cet utilisateur")
        print("3. Lors d'une analyse IA, get_openai_api_key(user_id) r√©cup√®re la cl√© personnelle")
        print("4. Si aucune cl√© personnelle, la fonction utilise la cl√© par d√©faut")
        print("5. L'analyse GPT est effectu√©e avec la cl√© appropri√©e")
        print("6. Les r√©sultats sont stock√©s en base avec l'ID utilisateur")
        
    else:
        print("‚ö†Ô∏è Certaines v√©rifications ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 