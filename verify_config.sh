#!/bin/bash

# =============================================================================
# SCRIPT DE V√âRIFICATION DES CONFIGURATIONS ET CHEMINS
# =============================================================================
# V√©rifie que tous les fichiers et configurations sont corrects
# Usage: ./verify_config.sh
# =============================================================================

set -e

echo "üîç V√âRIFICATION DES CONFIGURATIONS ET CHEMINS"
echo "============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =============================================================================
# √âTAPE 1: V√âRIFICATION DES FICHIERS PRINCIPAUX
# =============================================================================

log_info "V√©rification des fichiers principaux..."

# Fichiers requis
REQUIRED_FILES=(
    "Docker/docker-compose.yml"
    "Docker/retriever/app.py"
    "Docker/retriever/requirements.txt"
    "Docker/retriever/Dockerfile"
    "Dockerfile"
    "app.py"
    "requirements.txt"
    "Vagrantfile"
    "setup_soc_models.sh"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        log_success "‚úÖ $file existe"
    else
        log_error "‚ùå $file manquant"
        exit 1
    fi
done

# =============================================================================
# √âTAPE 2: V√âRIFICATION DU DOCKER-COMPOSE.YML
# =============================================================================

log_info "V√©rification du docker-compose.yml..."

# V√©rifier que Ollama est configur√©
if grep -q "ollama:" Docker/docker-compose.yml; then
    log_success "‚úÖ Service Ollama configur√©"
else
    log_error "‚ùå Service Ollama manquant dans docker-compose.yml"
    exit 1
fi

# V√©rifier que TGI est comment√©
if grep -q "# tgi:" Docker/docker-compose.yml; then
    log_success "‚úÖ Service TGI correctement comment√©"
else
    log_warning "‚ö†Ô∏è Service TGI pas comment√© (peut causer des conflits)"
fi

# V√©rifier les ports
if grep -q "11434:11434" Docker/docker-compose.yml; then
    log_success "‚úÖ Port Ollama (11434) configur√©"
else
    log_error "‚ùå Port Ollama manquant"
    exit 1
fi

# V√©rifier les volumes
if grep -q "ollama_data:" Docker/docker-compose.yml; then
    log_success "‚úÖ Volume Ollama configur√©"
else
    log_error "‚ùå Volume Ollama manquant"
    exit 1
fi

# =============================================================================
# √âTAPE 3: V√âRIFICATION DU RETRIEVER
# =============================================================================

log_info "V√©rification du retriever..."

# V√©rifier que le retriever utilise Ollama
if grep -q "OLLAMA_URL" Docker/retriever/app.py; then
    log_success "‚úÖ Retriever configur√© pour Ollama"
else
    log_error "‚ùå Retriever pas configur√© pour Ollama"
    exit 1
fi

# V√©rifier les mod√®les SOC
if grep -q "mixtral:8x7b-instruct-q4_K_M" Docker/retriever/app.py; then
    log_success "‚úÖ Mod√®le Mixtral configur√©"
else
    log_warning "‚ö†Ô∏è Mod√®le Mixtral pas trouv√© dans le retriever"
fi

if grep -q "nous-hermes-2-mistral:7b-dpo-q4_K_M" Docker/retriever/app.py; then
    log_success "‚úÖ Mod√®le Nous-Hermes-2 configur√©"
else
    log_warning "‚ö†Ô∏è Mod√®le Nous-Hermes-2 pas trouv√© dans le retriever"
fi

if grep -q "openhermes-2.5-mistral:7b-q4_K_M" Docker/retriever/app.py; then
    log_success "‚úÖ Mod√®le OpenHermes-2.5 configur√©"
else
    log_warning "‚ö†Ô∏è Mod√®le OpenHermes-2.5 pas trouv√© dans le retriever"
fi

# =============================================================================
# √âTAPE 4: V√âRIFICATION DU VAGRANTFILE
# =============================================================================

log_info "V√©rification du Vagrantfile..."

# V√©rifier la RAM
if grep -q 'vb.memory = "8192"' Vagrantfile; then
    log_success "‚úÖ RAM configur√©e √† 8GB"
else
    log_warning "‚ö†Ô∏è RAM pas configur√©e √† 8GB"
fi

# V√©rifier les CPU
if grep -q 'vb.cpus = 4' Vagrantfile; then
    log_success "‚úÖ CPU configur√©s √† 4 cores"
else
    log_warning "‚ö†Ô∏è CPU pas configur√©s √† 4 cores"
fi

# V√©rifier le port Ollama
if grep -q "11434" Vagrantfile; then
    log_success "‚úÖ Port Ollama (11434) dans Vagrantfile"
else
    log_error "‚ùå Port Ollama manquant dans Vagrantfile"
    exit 1
fi

# =============================================================================
# √âTAPE 5: V√âRIFICATION DES SCRIPTS
# =============================================================================

log_info "V√©rification des scripts..."

# V√©rifier que setup_soc_models.sh est ex√©cutable
if [ -x "setup_soc_models.sh" ]; then
    log_success "‚úÖ setup_soc_models.sh est ex√©cutable"
else
    log_warning "‚ö†Ô∏è setup_soc_models.sh pas ex√©cutable"
    log_info "Ex√©cuter: chmod +x setup_soc_models.sh"
fi

# V√©rifier le contenu du script
if grep -q "mixtral:8x7b-instruct-q4_K_M" setup_soc_models.sh; then
    log_success "‚úÖ Script contient Mixtral"
else
    log_error "‚ùå Script ne contient pas Mixtral"
    exit 1
fi

# =============================================================================
# √âTAPE 6: V√âRIFICATION DES CHEMINS RELATIFS
# =============================================================================

log_info "V√©rification des chemins relatifs..."

# V√©rifier que le retriever peut acc√©der aux fichiers
if [ -f "Docker/retriever/app.py" ]; then
    log_success "‚úÖ Chemin retriever/app.py valide"
else
    log_error "‚ùå Chemin retriever/app.py invalide"
    exit 1
fi

# V√©rifier que le Dockerfile principal peut acc√©der aux fichiers
if [ -f "Dockerfile" ]; then
    log_success "‚úÖ Dockerfile principal pr√©sent"
else
    log_error "‚ùå Dockerfile principal manquant"
    exit 1
fi

# =============================================================================
# √âTAPE 7: V√âRIFICATION DES D√âPENDANCES
# =============================================================================

log_info "V√©rification des d√©pendances..."

# V√©rifier requirements.txt du retriever
if grep -q "fastapi" Docker/retriever/requirements.txt; then
    log_success "‚úÖ FastAPI dans requirements.txt"
else
    log_error "‚ùå FastAPI manquant dans requirements.txt"
    exit 1
fi

if grep -q "requests" Docker/retriever/requirements.txt; then
    log_success "‚úÖ Requests dans requirements.txt"
else
    log_error "‚ùå Requests manquant dans requirements.txt"
    exit 1
fi

if grep -q "chromadb" Docker/retriever/requirements.txt; then
    log_success "‚úÖ ChromaDB dans requirements.txt"
else
    log_error "‚ùå ChromaDB manquant dans requirements.txt"
    exit 1
fi

# =============================================================================
# √âTAPE 8: R√âSUM√â FINAL
# =============================================================================

echo ""
echo "üéâ V√âRIFICATION TERMIN√âE !"
echo "=========================="
echo ""
echo "üìã R√âSUM√â:"
echo "  ‚Ä¢ Fichiers principaux: ‚úÖ"
echo "  ‚Ä¢ Docker Compose: ‚úÖ"
echo "  ‚Ä¢ Retriever: ‚úÖ"
echo "  ‚Ä¢ Vagrantfile: ‚úÖ"
echo "  ‚Ä¢ Scripts: ‚úÖ"
echo "  ‚Ä¢ Chemins: ‚úÖ"
echo "  ‚Ä¢ D√©pendances: ‚úÖ"
echo ""
echo "üöÄ PR√äT POUR LE D√âPLOIEMENT !"
echo ""
echo "üìù PROCHAINES √âTAPES:"
echo "1. vagrant up"
echo "2. vagrant ssh"
echo "3. ./setup_soc_models.sh"
echo ""
log_success "Configuration valid√©e avec succ√®s ! üéØ" 